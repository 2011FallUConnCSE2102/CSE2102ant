<?xml version="1.0"?>

<!-- ======================================================================= -->
<!-- Ant own build file                                                      -->
<!-- ======================================================================= -->

<project name="Ant" default="main" basedir=".">

  <!-- Give user a chance to override without editing this file 
       (and without typing -D each time it compiles it -->
  <property file="${user.home}/.ant.properties" />

  <property name="Name" value="Ant"/>
  <property name="name" value="ant"/>
  <property name="version" value="1.2alpha"/>

  <property name="ant.home" value="."/>
  <property name="src.bin.dir" value="src/bin"/>
  <property name="src.dir" value="src/main"/>
  <property name="src.tests.dir" value="src/testcases"/>
  <property name="docs.dir" value="docs"/>
  <property name="build.dir" value="../build/ant"/>
  <property name="lib.dir" value="${build.dir}/lib"/>
  <property name="bin.dir" value="${build.dir}/bin"/>
  <property name="build.classes" value="${build.dir}/classes"/>
  <property name="build.javadocs" value="${build.dir}/javadocs"/>
  <property name="build.tests" value="${build.dir}/testcases"/>
  <property name="ant.dist.dir" value="../dist/ant"/>

  <property name="classpath" value=""/>
  <property name="packages" value="org.apache.tools.*"/>
  <property name="manifest" value="src/etc/manifest"/>

  <property name="build.compiler" value="classic"/>
<!--  <property name="build.compiler.emacs" value="on"/> -->

  <!-- =================================================================== -->
  <!-- Check to see what optional dependencies are available               -->
  <!-- =================================================================== -->
  <target name="check_for_optional_packages">
    <available property="jdk1.2+" classname="java.lang.ThreadLocal" />
    <available property="jdk1.3+" classname="java.lang.StrictMath" />
    <available property="bsf.present" classname="com.ibm.bsf.BSFManager" />
    <available property="netrexx.present" classname="netrexx.lang.Rexx" />
    <available property="xslp.present" 
               classname="com.kvisco.xsl.XSLProcessor" />
    <available property="xalan.present" 
               classname="org.apache.xalan.xslt.XSLTProcessorFactory" />
    <available property="ejb.ejbc.present" classname="weblogic.ejbc" />
    <available property="ejb.DDCreator.present" classname="weblogic.ejb.utils.DDCreator" />
    <available property="ejb.wls.present" classname="weblogic.Server" />
    <available property="junit.present" classname="junit.framework.TestCase" />
  </target>

  <!-- =================================================================== -->
  <!-- Prepares the build directory                                        -->
  <!-- =================================================================== -->
  <target name="prepare">
    <mkdir dir="${build.dir}"/>
    <tstamp />
  </target>

  <!-- =================================================================== -->
  <!-- Compiles the source code                                            -->
  <!-- =================================================================== -->
  <target name="compile" depends="prepare,check_for_optional_packages">
    <mkdir dir="${build.classes}"/>

    <javac srcdir="${src.dir}"
           destdir="${build.classes}"
           classpath="${classpath}"
           debug="on"
           deprecation="off"
           optimize="on" >
      <exclude name="**/Script.java" unless="bsf.present" />
      <exclude name="**/NetRexxC.java" unless="netrexx.present" />
      <exclude name="**/XslpLiaison.java" unless="xslp.present" />
      <exclude name="**/XalanLiaison.java" unless="xalan.present" />
      <exclude name="**/Ejbc*.java" unless="ejb.ejbc.present" />
      <exclude name="**/DDCreator*.java" unless="ejb.DDCreator.present" />
      <exclude name="**/WLRun.java" unless="ejb.wls.present" />
      <exclude name="**/WLStop.java" unless="ejb.wls.present" />
      <exclude name="**/EjbJar.java" unless="jdk1.2+" />
      <exclude name="**/*DeploymentTool.java" unless="jdk1.2+" />
      <exclude name="**/junit/*" unless="junit.present" />
    </javac>
 
    <copydir src="${src.dir}" dest="${build.classes}">
      <include name="**/defaultManifest.mf" />
      <include name="**/*.properties" />
    </copydir>

    <filter token="VERSION" value="${version}" />
    <filter token="DATE" value="${TODAY}" />
    <filter token="TIME" value="${TSTAMP}" />
    <copydir src="${src.dir}" 
             dest="${build.classes}" 
             forceoverwrite="true"
             filtering="on">
      <include name="**/version.txt" />
    </copydir>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the jar archive                                             -->
  <!-- =================================================================== -->
  <target name="jar" depends="compile">
    <mkdir dir="${lib.dir}"/>
    <jar jarfile="${lib.dir}/${name}.jar"
         basedir="${build.classes}"
         includes="org/**"
         manifest="${manifest}"
    />
  </target>

  <!-- =================================================================== -->
  <!-- Creates the binary structure                                        -->
  <!-- =================================================================== -->
  <target name="main" depends="jar">
     <mkdir dir="${bin.dir}"/>
     <copydir src="${src.bin.dir}" dest="${bin.dir}"/>
     <chmod perm="+x">
       <fileset dir="${bin.dir}">
         <patternset id="chmod.patterns">
           <include name="**/ant" />
           <include name="**/antRun" />
         </patternset>
       </fileset>
     </chmod>
     <fixcrlf srcdir="${bin.dir}" includes="ant,antRun" cr="remove"/>
     <fixcrlf srcdir="${bin.dir}" includes="*.bat" cr="add"/>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the API documentation                                       -->
  <!-- =================================================================== -->
  <target name="javadocs" depends="prepare">
    <mkdir dir="${build.javadocs}"/>
    <javadoc packagenames="${packages}"
             sourcepath="${basedir}/${src.dir}"
             destdir="${build.javadocs}"
             author="true"
             version="true"
             windowtitle="${Name} API"
             doctitle="${Name}"
             bottom="Copyright &#169; 2000 Apache Software Foundation. All Rights Reserved.">
    </javadoc>
  </target>

  <!-- =================================================================== -->
  <!-- Creates the distribution                                            -->
  <!-- =================================================================== -->
  <target name="dist" depends="main,jar,javadocs">
     <mkdir dir="${ant.dist.dir}"/>
     <mkdir dir="${ant.dist.dir}/bin"/>
     <mkdir dir="${ant.dist.dir}/lib"/>
     <mkdir dir="${ant.dist.dir}/docs"/>
     <mkdir dir="${ant.dist.dir}/docs/api"/>
     <mkdir dir="${ant.dist.dir}/src"/>

     <copydir src="${src.dir}" dest="${ant.dist.dir}/src"/>
     <copydir src="${lib.dir}" dest="${ant.dist.dir}/lib"/>

     <copyfile src="build.xml" dest="${ant.dist.dir}/lib/build.xml"/>
     <copydir src="src/bin" dest="${ant.dist.dir}/bin"/>
     <copydir src="${docs.dir}" dest="${ant.dist.dir}/docs"/>
     <copydir src="${build.javadocs}" dest="${ant.dist.dir}/docs/api"/>

     <chmod perm="+x">
       <fileset dir="${ant.dist.dir}/bin">
         <patternsetref refid="chmod.patterns"/>
       </fileset>
     </chmod>

     <copyfile src="README" dest="${ant.dist.dir}/README"/>
     <copyfile src="TODO" dest="${ant.dist.dir}/TODO"/>
     <copyfile src="LICENSE" dest="${ant.dist.dir}/LICENSE"/>
  </target>

  <!-- =================================================================== -->
  <!-- Packages the distribution with ZIP                                  -->
  <!-- =================================================================== -->
  <target name="dist-zip" depends="dist">
    <zip zipfile="${Name}-${version}.zip" basedir="${ant.dist.dir}" includes="**"/>
  </target>

  <!-- =================================================================== -->
  <!-- Packages the distribution with TAR-GZIP                             -->
  <!-- =================================================================== -->
  <target name="dist-tgz" depends="dist">
    <tar tarfile="${Name}-${version}.tar" basedir="${ant.dist.dir}" includes="**"/>
    <gzip zipfile="${Name}-${version}.tar.gz" src="${Name}-${version}.tar"/>
  </target>

  <!-- =================================================================== -->
  <!-- Installs the ant.jar library and binary files into ant.home         -->
  <!-- =================================================================== -->
  <target name="bootstrap" depends="main">
    <echo message="copying bootstrapped files into bin and lib"/>
    <copydir src="${lib.dir}" dest="lib"/>
    <copydir src="${bin.dir}" dest="bin"/>
  </target>     

  <target name="install" depends="dist" if="ant.install">
    <echo message="installing full copy of ant into ${ant.install}"/>
    <mkdir dir="${ant.install}"/>
    <copydir src="${ant.dist.dir}" dest="${ant.install}"/>
    <chmod perm="+x">
      <fileset dir="${ant.install}/bin">
        <patternsetref refid="chmod.patterns"/>
      </fileset>
    </chmod>
  </target>     

  <target name="fullinstall" depends="install"/>
  
  <target name="mininstall" depends="main" if="ant.install">
    <echo message="copy minimal ant installation into ${ant.install}"/>
    <mkdir dir="${ant.install}"/>
    <copydir src="${lib.dir}" dest="${ant.install}/lib"/>
    <copydir src="${bin.dir}" dest="${ant.install}/bin"/>
    <chmod perm="+x">
      <fileset dir="${ant.install}/bin">
        <patternsetref refid="chmod.patterns"/>
      </fileset>
    </chmod>
  </target>     

  <!-- =================================================================== -->
  <!-- Cleans up generated stuff                                           -->
  <!-- =================================================================== -->
  <target name="clean">
    <deltree dir="${build.dir}"/>
    <deltree dir="${ant.dist.dir}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Total cleanup                                                       -->
  <!-- =================================================================== -->
  <target name="total-clean" depends="clean">
    <deltree dir="${bin.dir}"/>
    <delete file="${lib.dir}/${name}.jar"/>
    <delete file="${Name}-${version}.zip"/>
    <delete file="${Name}-${version}.tar"/>
    <delete file="${Name}-${version}.tar.gz"/>
  </target>

  <!-- in progress ! (may not work) -->

  <target name="get.snapshot">
    <get src="http://jakarta.apache.org/build/tmp/ant/ant.src.zip" dest="ant-src.zip" />
    <unzip src="ant-src.zip" dest="." />
  </target>

  <target name="make.snapshot">
    <cvs cvsRoot=":pserver:anoncvs@jakarta.apache.org:/home/cvspublic"
         package="jakarta-ant"
         dest="."  />
    <zip zipfile="/www/jakarta.apache.org/builds/tmp/ant/ant.src.zip" basedir="." includes="jakarta-ant/**"/>
  </target>

  <!-- =================================================================== -->
  <!-- Compile testcases                                                   -->
  <!-- =================================================================== -->
  <target name="compiletests" depends="jar">
    <mkdir dir="${build.tests}"/>

    <javac srcdir="${src.tests.dir}"
           destdir="${build.tests}"
           debug="on"
           deprecation="off"
           optimize="on" >
      <classpath>
        <pathelement location="${lib.dir}/${name}.jar" />
        <pathelement path="${classpath}" />
      </classpath>
      <include name="**/*.java"/>
      <exclude name="**/AllJUnitTests.java" unless="junit.present" />
      <exclude name="**/EnumeratedAttributeTest.java" unless="junit.present" />
      <exclude name="**/IntrospectionHelperTest.java" unless="junit.present" />
      <exclude name="**/PathTest.java" unless="junit.present" />
      <exclude name="**/CommandlineTest.java" unless="junit.present" />
      <exclude name="**/CommandlineJavaTest.java" unless="junit.present" />
    </javac>
   </target>

  <!-- =================================================================== -->
  <!-- Run testcase                                                        -->
  <!-- =================================================================== -->
  <target name="runtests" depends="compiletests" if="junit.present">

<!--
    This would make the buildprocess fail if using an Ant version
    without the junit task

    <junit defaultprintxml="false" defaultprintsummary="true" fork="on">
      <classpath>
        <pathelement location="${lib.dir}/${name}.jar" />
        <pathelement location="${build.tests}" />
        <pathelement path="${classpath}" />
        <pathelement path="${java.class.path}" />
      </classpath>

      <test name="org.apache.tools.ant.IntrospectionHelperTest" />
      <test name="org.apache.tools.ant.types.CommandlineTest" />
      <test name="org.apache.tools.ant.types.CommandlineJavaTest" />
      <test name="org.apache.tools.ant.types.EnumeratedAttributeTest" />
      <test name="org.apache.tools.ant.types.PathTest" />
    </junit>
-->

    <java fork="yes"
          classname="junit.textui.TestRunner"
          taskname="junit">
      <arg value="org.apache.tools.ant.AllJUnitTests" />
      <classpath>
        <pathelement location="${lib.dir}/${name}.jar" />
        <pathelement location="${build.tests}" />
        <pathelement path="${classpath}" />
        <pathelement path="${java.class.path}" />
      </classpath>
    </java>
  </target>

</project>

